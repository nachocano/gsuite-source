/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/nachocano/gsuite-source/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CalendarSourceLister helps list CalendarSources.
type CalendarSourceLister interface {
	// List lists all CalendarSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CalendarSource, err error)
	// CalendarSources returns an object that can list and get CalendarSources.
	CalendarSources(namespace string) CalendarSourceNamespaceLister
	CalendarSourceListerExpansion
}

// calendarSourceLister implements the CalendarSourceLister interface.
type calendarSourceLister struct {
	indexer cache.Indexer
}

// NewCalendarSourceLister returns a new CalendarSourceLister.
func NewCalendarSourceLister(indexer cache.Indexer) CalendarSourceLister {
	return &calendarSourceLister{indexer: indexer}
}

// List lists all CalendarSources in the indexer.
func (s *calendarSourceLister) List(selector labels.Selector) (ret []*v1alpha1.CalendarSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CalendarSource))
	})
	return ret, err
}

// CalendarSources returns an object that can list and get CalendarSources.
func (s *calendarSourceLister) CalendarSources(namespace string) CalendarSourceNamespaceLister {
	return calendarSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CalendarSourceNamespaceLister helps list and get CalendarSources.
type CalendarSourceNamespaceLister interface {
	// List lists all CalendarSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CalendarSource, err error)
	// Get retrieves the CalendarSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CalendarSource, error)
	CalendarSourceNamespaceListerExpansion
}

// calendarSourceNamespaceLister implements the CalendarSourceNamespaceLister
// interface.
type calendarSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CalendarSources in the indexer for a given namespace.
func (s calendarSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CalendarSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CalendarSource))
	})
	return ret, err
}

// Get retrieves the CalendarSource from the indexer for a given namespace and name.
func (s calendarSourceNamespaceLister) Get(name string) (*v1alpha1.CalendarSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("calendarsource"), name)
	}
	return obj.(*v1alpha1.CalendarSource), nil
}
